---
description: 
globs: 
alwaysApply: false
---
# IconPackr Project Rules for Cursor AI

## Project Overview
IconPackr is a command-line tool that transforms SVG icon collections into professional, optimized component libraries for multiple frameworks (React, Vue, React Native). It preserves existing folder structures while optimizing SVGs and generating framework-specific components.

## Architecture and File Structure

### Expected Input Structure
- icons/
  - stroke/category/icon.svg
  - solid/category/icon.svg
  - contrast/category/icon.svg
  - duo-stroke/category/icon.svg
  - duo-solid/category/icon.svg

### Expected Output Structure
- icons/
  - react-jsx/style/category/Icon.jsx
  - react-tsx/style/category/Icon.tsx
  - vue/style/category/Icon.vue
  - react-native/style/category/Icon.jsx

## Coding Standards

### General
- Use ES Modules (import/export) syntax throughout the project
- Apply clean code principles with descriptive function and variable names
- Include JSDoc comments for all exported functions
- Prefer async/await over Promise chains
- Use consistent error handling with informative error messages

### Style
- Use 2 spaces for indentation
- Use semicolons consistently
- Use single quotes for strings
- Apply camelCase for variables and functions, PascalCase for components
- Keep line length under 100 characters

## Technology Stack
- Node.js for the runtime environment
- SVGO for SVG optimization
- Commander.js for CLI argument parsing
- fs-extra for enhanced file operations
- chalk for terminal coloring
- glob for file pattern matching

## Implementation Guidelines

### SVG Processing
- Optimize SVGs while preserving viewBox attributes
- Remove unnecessary attributes and metadata
- Ensure consistent fill/stroke handling for theming
- Add ARIA attributes for accessibility
- Handle duotone icons appropriately with multiple paths

### Component Generation
- Create components that accept size, color, and other standard props
- Ensure props are typed correctly in TypeScript components
- Support currentColor for theming
- Handle stroke/fill attributes based on icon style
- Preserve original viewBox values
- Follow each framework's best practices for SVG component structure
### Command Line Interface
- Provide clear, concise command options
- Support selecting specific formats to generate
- Include progress indicators for longer operations
- Display meaningful success/error messages
- Support dry run option to preview without writing files

## File-Specific Guidelines

### src/cli.js
- Parse command-line arguments using Commander.js
- Validate input/output paths and options
- Call the main processing function with parsed options
- Handle errors gracefully with informative messages

### src/index.js
- Implement the main processing logic
- Discover SVG files in the input directory structure
- Coordinate optimization and component generation
- Maintain the original folder structure in output

### src/utils/svgo.js
- Configure SVGO for optimal component usage
- Handle different icon styles appropriately
- Apply consistent optimization rules

### src/templates/[framework].js
- Implement template generation for each framework
- Follow framework-specific best practices
- Support all required props and attributes
- Ensure accessibility compliance

## Testing
- Include basic test cases for each major function
- Test with sample icons from different styles and categories
- Verify output components render correctly in their frameworks
